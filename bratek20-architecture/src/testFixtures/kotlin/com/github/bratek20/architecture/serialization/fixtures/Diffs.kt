// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.architecture.serialization.fixtures

import com.github.bratek20.architecture.serialization.api.*

fun diffSerializationType(given: SerializationType, expected: String, path: String = ""): String {
    if (given != SerializationType.valueOf(expected)) { return "${path}value ${given.name} != ${expected}" }
    return ""
}

data class ExpectedSerializedValue(
    var value: String? = null,
    var type: String? = null,
)
fun diffSerializedValue(given: SerializedValue, expectedInit: ExpectedSerializedValue.() -> Unit, path: String = ""): String {
    val expected = ExpectedSerializedValue().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.value?.let {
        if (given.getValue() != it) { result.add("${path}value ${given.getValue()} != ${it}") }
    }

    expected.type?.let {
        if (diffSerializationType(given.getType(), it) != "") { result.add(diffSerializationType(given.getType(), it, "${path}type.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedSerializerConfig(
    var readable: Boolean? = null,
)
fun diffSerializerConfig(given: SerializerConfig, expectedInit: ExpectedSerializerConfig.() -> Unit, path: String = ""): String {
    val expected = ExpectedSerializerConfig().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.readable?.let {
        if (given.getReadable() != it) { result.add("${path}readable ${given.getReadable()} != ${it}") }
    }

    return result.joinToString("\n")
}