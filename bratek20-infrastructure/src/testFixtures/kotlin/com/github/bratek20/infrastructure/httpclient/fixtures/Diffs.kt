// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.infrastructure.httpclient.fixtures

import com.github.bratek20.infrastructure.httpclient.api.*

data class ExpectedHttpClientAuth(
    var username: String? = null,
    var password: String? = null,
)
fun diffHttpClientAuth(given: HttpClientAuth, expectedInit: ExpectedHttpClientAuth.() -> Unit, path: String = ""): String {
    val expected = ExpectedHttpClientAuth().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.username?.let {
        if (given.getUsername() != it) { result.add("${path}username ${given.getUsername()} != ${it}") }
    }

    expected.password?.let {
        if (given.getPassword() != it) { result.add("${path}password ${given.getPassword()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedHttpClientConfig(
    var baseUrl: String? = null,
    var authEmpty: Boolean? = null,
    var auth: (ExpectedHttpClientAuth.() -> Unit)? = null,
)
fun diffHttpClientConfig(given: HttpClientConfig, expectedInit: ExpectedHttpClientConfig.() -> Unit, path: String = ""): String {
    val expected = ExpectedHttpClientConfig().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.baseUrl?.let {
        if (given.getBaseUrl() != it) { result.add("${path}baseUrl ${given.getBaseUrl()} != ${it}") }
    }

    expected.authEmpty?.let {
        if ((given.getAuth() == null) != it) { result.add("${path}auth empty ${(given.getAuth() == null)} != ${it}") }
    }

    expected.auth?.let {
        if (diffHttpClientAuth(given.getAuth()!!, it) != "") { result.add(diffHttpClientAuth(given.getAuth()!!, it, "${path}auth.")) }
    }

    return result.joinToString("\n")
}